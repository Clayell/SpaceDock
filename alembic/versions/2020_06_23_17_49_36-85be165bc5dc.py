"""Add Mod.score

Revision ID: 85be165bc5dc
Revises: d6f41a805840
Create Date: 2020-06-23 17:49:36.709613

"""

from datetime import datetime

from packaging import version
from sqlalchemy import orm, Column, Integer, Unicode, DateTime, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, backref

# revision identifiers, used by Alembic.
revision = '85be165bc5dc'
down_revision = 'd6f41a805840'

from alembic import op
import sqlalchemy as sa

Base = declarative_base()


class Game(Base):  # type: ignore
    __tablename__ = 'game'
    id = Column(Integer, primary_key=True)


class GameVersion(Base):  # type: ignore
    __tablename__ = 'gameversion'
    id = Column(Integer, primary_key=True)
    friendly_version = Column(String(128))
    game_id = Column(Integer, ForeignKey('game.id'))
    game = relationship('Game', backref='versions')


class Mod(Base):  # type: ignore
    __tablename__ = 'mod'
    id = Column(Integer, primary_key=True)
    created = Column(DateTime, default=datetime.now)
    updated = Column(DateTime, default=datetime.now)
    game_id = Column(Integer, ForeignKey('game.id'))
    game = relationship('Game', backref='mods')
    description = Column(Unicode(100000))
    default_version_id = Column(Integer, ForeignKey('modversion.id'))
    default_version = relationship('ModVersion',
                                   foreign_keys=default_version_id,
                                   post_update=True)
    source_link = Column(String(256))
    follower_count = Column(Integer, nullable=False, default=0)
    download_count = Column(Integer, nullable=False, default=0)
    score = Column(sa.Float, default=0, nullable=False, index=True)


class ModVersion(Base):  # type: ignore
    __tablename__ = 'modversion'
    id = Column(Integer, primary_key=True)
    mod_id = Column(Integer, ForeignKey('mod.id'))
    mod = relationship('Mod',
                       backref=backref('versions', order_by="desc(ModVersion.sort_index)"),
                       foreign_keys=mod_id)
    gameversion_id = Column(Integer, ForeignKey('gameversion.id'))
    gameversion = relationship('GameVersion', backref=backref('mod_versions', order_by=id))
    sort_index = Column(Integer, default=0)


class Media(Base):  # type: ignore
    __tablename__ = 'media'
    id = Column(Integer, primary_key=True)
    mod_id = Column(Integer, ForeignKey('mod.id'))
    mod = relationship('Mod', backref=backref('media', order_by=id))


def versions_behind(mod: Mod) -> int:
    all = (version.Version(v.friendly_version) for v in mod.game.versions)
    compat = version.Version(mod.default_version.gameversion.friendly_version)
    return sum(1 for v in all if v > compat)


def get_mod_score(mod: Mod) -> int:
    score = 0
    if mod.default_version is None:
        return score
    score += mod.follower_count * 10
    score += mod.download_count
    score += len(mod.versions) // 5
    score += len(mod.media)
    if len(mod.description) < 100:
        score -= 10
    if mod.updated:
        delta = (datetime.now() - mod.updated).days
        if delta > 100:
            delta = 100  # Don't penalize for oldness past a certain point
        score -= delta / 5
    if mod.source_link:
        score += 10
    if (mod.created - datetime.now()).days < 30:
        score += 100
    # 5% penalty for each game version newer than the latest compatible (capped at 90%)
    num_incompat = versions_behind(mod)
    if num_incompat > 0:
        penalty = min(0.05 * num_incompat, 0.9)
        score = int(score * (1.0 - penalty))
    return score


def upgrade() -> None:
    # autogenerated
    op.add_column('mod', sa.Column('score', sa.Float(),
                                   nullable=False, index=True, server_default='0'))

    # manually added
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    for mod in session.query(Mod).all():
        mod.score = get_mod_score(mod)

    session.commit()


def downgrade() -> None:
    # autogenerated
    op.drop_column('mod', 'score')
